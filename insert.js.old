const { Pool } = require('pg');
const parse = require('csv-parse');
const fs = require('fs');
const axios = require('axios');
const { Writable } = require('stream');

const geocodeUsingGeoSearch = (address, borough) => {
  return axios.get('https://geosearch.planninglabs.nyc/v1/search/structured', {
    params: {
      address: address,
      borough: borough
    }
  })
    .then((resp) => resp, (err) => {
      // Uhh, this api returns 400 status for successful calls. WTF idk.
      if (err.response.status === 400) {
        return err.response;
      }
      throw err;
    })
    .then((resp) => resp.data.features.length ?
      resp.data.features[0].geometry.coordinates :
      null);
};

const geocodeUsingMapbox = (address, borough) => {
  return axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(`${address}, ${borough}`)}.json`, {
    params: {
      // eslint-disable-next-line camelcase
      access_token: '***REMOVED***',
      country: 'US',
      bbox: '-74.2590879797556,40.477399,-73.7008392055224,40.917576401307',
      types: 'address'
    }
  })
    .then((resp) => resp.data.features.length ?
      resp.data.features[0].center : null);
};


( async function () {
  const pool = new Pool({
    user: 'julianboilen',
    host: 'localhost',
    database: 'fourtiesnyc'
  });

  const parser = parse({
    columns: true
  });

  const toPostgres = new Writable({
    objectMode: true,
    write(data, encoding, callback) {
      let buildingNumberStart;
      let buildingNumberEnd;
      if (data['1940 Building Number']) {
        const fullBldgNum = data['1940 Building Number'];
        if (fullBldgNum.includes('-')) {
          [buildingNumberStart, buildingNumberEnd] = fullBldgNum.split('-', 2);
        } else {
          buildingNumberStart = buildingNumberEnd = fullBldgNum;
        }
      }

      let sideOfStreet;
      if (buildingNumberStart) {
        sideOfStreet = (+buildingNumberStart.match(/^\d+/)) % 2 === 0;
      }


      if (buildingNumberStart && data['1940 Street Name']) {
        const simplifiedAddress = buildingNumberStart + ' ' + data['1940 Street Name'];
        geocodeUsingGeoSearch(simplifiedAddress, data.Borough)
          .then(result => result ? result : geocodeUsingMapbox(simplifiedAddress, data.Borough))
          .then((coordinates) => {
            let lat,
              lng;
            if (coordinates) {
              [lng, lat] = coordinates;
            } else {
              console.log('Could not geocode ' + buildingNumberStart + ' ' + data['1940 Street Name']);
            }
            console.log(`${data.Address} is at ${lat}, ${lng}`);
            callback();
          })
          .catch((err) => {
            console.log(err, data.Address);
            callback(err);
          });
      } else {
        console.log(`No address for block=${data.Block}, lot=${data.Lot}`);
        callback();
      }
    }
  });

  fs.createReadStream('metadata.csv').pipe(parser).pipe(toPostgres)
    .on('finish', () => {
      pool.end();
    })
    .on('error', (err) => {
      console.log(err);
    });

}());

